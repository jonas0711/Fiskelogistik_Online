/**
 * RIO Upload API Endpoint
 * H√•ndterer upload af Excel-filer med chauff√∏rdata
 * Konverterer Excel-data til Supabase database
 */

import { NextRequest, NextResponse } from 'next/server'; // Next.js request/response typer
import { supabase } from '../../../../libs/db'; // Vores Supabase klient
import * as XLSX from 'xlsx'; // Excel parsing bibliotek

export async function POST(request: NextRequest) {
  console.log('üì§ RIO Upload API kaldt...');
  
  try {
    // Tjek bruger session direkte med Supabase klient
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError || !session) {
      console.error('‚ùå Ingen gyldig session for upload');
      return NextResponse.json({
        success: false,
        message: 'Ingen gyldig session',
        error: 'UNAUTHORIZED'
      }, { status: 401 });
    }
    
    console.log('‚úÖ Session fundet for upload:', session.user?.email);
    
    // Tjek admin status
    const { isAdmin } = await import('../../../../libs/admin');
    const adminStatus = await isAdmin();
    if (!adminStatus) {
      console.error('‚ùå Bruger er ikke admin');
      return NextResponse.json({
        success: false,
        message: 'Kun administratorer kan uploade data',
        error: 'FORBIDDEN'
      }, { status: 403 });
    }
    
    // Parse multipart form data
    const formData = await request.formData();
    const file = formData.get('file') as File;
    const month = parseInt(formData.get('month') as string);
    const year = parseInt(formData.get('year') as string);
    
    console.log('üìä Modtaget data:', {
      fileName: file?.name,
      fileSize: file?.size,
      month,
      year
    });
    
    // Valider input
    if (!file) {
      console.error('‚ùå Ingen fil modtaget');
      return NextResponse.json({
        success: false,
        message: 'Ingen fil modtaget',
        error: 'NO_FILE'
      }, { status: 400 });
    }
    
    if (!month || !year) {
      console.error('‚ùå Manglende m√•ned eller √•r');
      return NextResponse.json({
        success: false,
        message: 'Manglende m√•ned eller √•r',
        error: 'INVALID_PERIOD'
      }, { status: 400 });
    }
    
    // Tjek filtype
    const validTypes = [
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx
      'application/vnd.ms-excel' // .xls
    ];
    
    if (!validTypes.includes(file.type)) {
      console.error('‚ùå Ugyldig filtype:', file.type);
      return NextResponse.json({
        success: false,
        message: 'Kun Excel-filer (.xlsx, .xls) er tilladt',
        error: 'INVALID_FILE_TYPE'
      }, { status: 400 });
    }
    
    // Konverter fil til buffer
    const buffer = await file.arrayBuffer();
    console.log('üìÑ Fil konverteret til buffer, st√∏rrelse:', buffer.byteLength);
    
    // Parse Excel fil
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0]; // F√∏rste sheet
    const worksheet = workbook.Sheets[sheetName];
    
    console.log('üìã Excel fil parsed, sheet:', sheetName);
    
    // Konverter til JSON
    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    console.log('üîÑ Excel konverteret til JSON, r√¶kker:', jsonData.length);
    
    // Hent headers (f√∏rste r√¶kke)
    const headers = jsonData[0] as string[];
    console.log('üìù Headers fundet:', headers.length);
    
    // Valider headers
    const requiredHeaders = [
      'Chauff√∏r', 'K√∏ret√∏jer', 'Forudseende k√∏rsel (vurdering) [%]',
      'Forudseende k√∏rsel uden k√∏rehastighedsregulering [%]', 'Fra', 'Til',
      '√ò Forbrug [l/100km]', 'K√∏restr√¶kning [km]', 'CO‚ÇÇ-emission [kg]'
    ];
    
    const missingHeaders = requiredHeaders.filter(header => !headers.includes(header));
    if (missingHeaders.length > 0) {
      console.error('‚ùå Manglende headers:', missingHeaders);
      return NextResponse.json({
        success: false,
        message: `Manglende kolonner: ${missingHeaders.join(', ')}`,
        error: 'MISSING_HEADERS'
      }, { status: 400 });
    }
    
    // Map Excel kolonner til database felter
    const columnMapping: { [key: string]: string } = {
      'Chauff√∏r': 'driver_name',
      'K√∏ret√∏jer': 'vehicles',
      'Forudseende k√∏rsel (vurdering) [%]': 'anticipatory_driving_assessment',
      'Forudseende k√∏rsel uden k√∏rehastighedsregulering [%]': 'anticipatory_driving_without_cruise',
      'Fra': 'from_date',
      'Til': 'to_date',
      '√ò Forbrug [l/100km]': 'avg_consumption_per_100km',
      '√ò Forbrug ved k√∏rsel [l/100km]': 'avg_consumption_driving',
      '√ò Forbrug ved tomgang [l/t]': 'avg_consumption_idling',
      '√ò R√¶kkevidde ved forbrug [km/l]': 'avg_range_per_consumption',
      'Forbrug [l]': 'total_consumption',
      '√ò totalv√¶gt [t]': 'avg_total_weight',
      'K√∏restr√¶kning [km]': 'driving_distance',
      'Effektivitet [l/t/100km]': 'efficiency_l_per_t_per_100km',
      'Motordriftstid [hh:mm:ss]': 'engine_runtime',
      'K√∏retid [hh:mm:ss]': 'driving_time',
      'Tomgang / stilstandstid [hh:mm:ss]': 'idle_standstill_time',
      '√ò-hastighed [km/h]': 'avg_speed',
      'CO‚ÇÇ-emission [kg]': 'co2_emission',
      'Vurdering af p√•l√∏bsdrift [%]': 'coasting_assessment',
      'Aktiv p√•l√∏bsdrift (km) [km]': 'active_coasting_km',
      'Varigheden af aktiv p√•l√∏bsdrift [hh:mm:ss]': 'active_coasting_duration',
      'Aktivt skubbedrev (stk.)': 'active_pushing_count',
      'Afstand i p√•l√∏bsdrift [km]': 'coasting_distance',
      'Varighed af p√•l√∏bsdrift med k√∏rehastighedsregulering [hh:mm:ss]': 'coasting_duration_with_cruise',
      'Antal faser i p√•l√∏bsdrift': 'coasting_phases_count',
      'Gaspedal-vurdering [%]': 'accelerator_assessment',
      'Kickdown (km) [km]': 'kickdown_km',
      'Varighed af brugen af kickdown [hh:mm:ss]': 'kickdown_duration',
      'Kickdown (stk.)': 'kickdown_count',
      'Tilbagelagt afstand ved aktivering af gaspedal og tilkoblet k√∏rehastighedsregulering [km]': 'accelerator_with_cruise_km',
      'Varigheden af aktivering af gaspedal og tilkoblet k√∏rehastighedsregulering [hh:mm:ss]': 'accelerator_with_cruise_duration',
      'Antal aktiveringer af gaspedal ved k√∏rehastighedsregulering': 'accelerator_activations_with_cruise',
      'Forbrug uden k√∏rehastighedsregulering [l/100km]': 'consumption_without_cruise',
      'Forbrug med k√∏rehastighedsregulering [l/100km]': 'consumption_with_cruise',
      'Vurdering af bremseadf√¶rd [%]': 'brake_behavior_assessment',
      'Driftsbremse (km) [km]': 'service_brake_km',
      'Varighed driftsbremse [hh:mm:ss]': 'service_brake_duration',
      'Driftsbremse (stk.)': 'service_brake_count',
      'Afstand motorbremse [km]': 'engine_brake_distance',
      'Varighed af motorbremse [hh:mm:ss]': 'engine_brake_duration',
      'Motorbremse (t√¶ller)': 'engine_brake_count',
      'Afstand retarder [km]': 'retarder_distance',
      'Varighed retarder [hh:mm:ss]': 'retarder_duration',
      'Retarder (stk.)': 'retarder_count',
      'N√∏dbremseassistent (t√¶ller)': 'emergency_brake_assist_count',
      'Vurdering af brugen af k√∏rehastighedsregulering [%]': 'cruise_control_assessment',
      'Afstand med k√∏rehastighedsregulering (> 50 km/h) [km]': 'cruise_distance_over_50',
      'Varighed af k√∏rehastighedsregulering (> 50 km/h) [hh:mm:ss]': 'cruise_duration_over_50',
      'Afstand > 50 km/h uden k√∏rehastighedsregulering [km]': 'distance_over_50_without_cruise',
      'Varighed uden k√∏rehastighedsregulering > 50 km/h [hh:mm:ss]': 'duration_over_50_without_cruise',
      'Gryde. afstand med fartpilot (> 50 km/h) [km]': 'avg_cruise_distance_over_50',
      'Vurdering overspeed': 'overspeed_assessment',
      'Overspeed (km uden p√•l√∏bsdrift) [km]': 'overspeed_km_without_coasting',
      'Samlet anvendelse': 'total_usage',
      'Indsatsdage': 'duty_days',
      'Forbrug [kWh]': 'electric_consumption_kwh',
      '√ò Forbrug ved k√∏rsel [kWh/km]': 'electric_avg_consumption_driving',
      'Gns. stilstandsforbrug [kWh/km]': 'electric_avg_standstill_consumption',
      '√ò R√¶kkevidde ved forbrug [km/kWh]': 'electric_avg_range',
      '√ò Forbrug [kWh/km]': 'electric_total_avg_consumption',
      'Energieffektivitet [kWh/t/km]': 'electric_energy_efficiency',
      'Elektrisk rekreation [kWh]': 'electric_recreation_kwh',
      'Elektrisk genvindingsvurdering [%]': 'electric_recovery_assessment',
      'Elektrisk fremsynet k√∏rsel (vurdering) [%]': 'electric_anticipatory_driving',
      'Elektrisk gaspedals kapacitet [%]': 'electric_accelerator_capacity',
      'Brugsvurdering af elektrisk fartpilot [%]': 'electric_cruise_usage_assessment',
      'Elektrisk overhastighedsklassificering [%]': 'electric_overspeed_classification'
    };
    
    // Konverter data r√¶kker til database format
    const recordsToInsert: Record<string, unknown>[] = [];
    
    // Disclaimer tekst der skal filtreres v√¶k
    const disclaimerText = "Bem√¶rk venligst, at en pr√¶stationsanalyse kun kan tage hensyn til delvise aspekter vedr√∏rende driftsm√•den (f.eks. fril√∏b) og de p√•virkningsfaktorer (f.eks. typen af inds√¶ttelse). Af denne grund er denne rapport kun en generel hj√¶lp og b√∏r aftales mellem chauff√∏ren og k√∏retr√¶neren/fl√•dechefen. Alvorligheden af brugen bestemt i Service MAN Perform og underklassificeringerne/den samlede vurdering er en MAN-specifik l√∏sning og kan derfor ikke sammenlignes med ratings eller ydeevneindikatorer fra andre producenter.";
    
    /**
     * Validerer om en r√¶kke indeholder gyldig chauff√∏rdata
     */
    const isValidDriverRow = (row: unknown[], rowIndex: number): boolean => {
      // Tjek om r√¶kken indeholder disclaimer tekst
      const rowContainsDisclaimer = row.some(cell => 
        typeof cell === 'string' && cell.includes(disclaimerText.substring(0, 50))
      );
      
      if (rowContainsDisclaimer) {
        console.log('üö´ Filtrerer v√¶k r√¶kke med disclaimer tekst (r√¶kke', rowIndex + 1, ')');
        return false;
      }
      
      // Tjek om r√¶kken indeholder for meget tekst (sandsynligvis ikke chauff√∏rdata)
      const textCells = row.filter(cell => typeof cell === 'string' && cell.length > 100);
      if (textCells.length > 2) {
        console.log('üö´ Filtrerer v√¶k r√¶kke med for meget tekst (r√¶kke', rowIndex + 1, ')');
        return false;
      }
      
      // Tjek om r√¶kken har chauff√∏rnavn i f√∏rste kolonne
      const driverNameCell = row[0];
      if (!driverNameCell || typeof driverNameCell !== 'string' || driverNameCell.trim().length < 2) {
        console.log('üö´ Filtrerer v√¶k r√¶kke uden gyldigt chauff√∏rnavn (r√¶kke', rowIndex + 1, ')');
        return false;
      }
      
      // Tjek om chauff√∏rnavnet ikke er en generisk tekst
      const invalidNames = ['chauff√∏r', 'driver', 'navn', 'name', 'total', 'sum', 'gennemsnit', 'average'];
      const driverName = driverNameCell.toLowerCase().trim();
      if (invalidNames.some(invalid => driverName.includes(invalid))) {
        console.log('üö´ Filtrerer v√¶k r√¶kke med ugyldigt chauff√∏rnavn:', driverNameCell, '(r√¶kke', rowIndex + 1, ')');
        return false;
      }
      
      return true;
    };
    
    console.log('üîç Starter konvertering af data r√¶kker...');
    
    for (let i = 1; i < jsonData.length; i++) { // Start fra r√¶kke 1 (skip headers)
      const row = jsonData[i] as unknown[];
      if (!row || row.length === 0) continue; // Skip tomme r√¶kker
      
      // Valider om r√¶kken indeholder gyldig chauff√∏rdata
      if (!isValidDriverRow(row, i)) {
        continue; // Skip denne r√¶kke
      }
      
      const record: Record<string, unknown> = {
        month,
        year
      };
      
      // Map hver kolonne til database felt
      headers.forEach((header, index) => {
        const dbField = columnMapping[header];
        if (dbField && row[index] !== undefined && row[index] !== null && row[index] !== '') {
          // Konverter v√¶rdier baseret p√• datatype
          let value = row[index];
          
          // H√•ndter numeriske v√¶rdier
          if (typeof value === 'string' && !isNaN(Number(value))) {
            value = Number(value);
          }
          
          // Kun tilf√∏j v√¶rdi hvis den ikke er tom
          if (value !== '') {
            record[dbField] = value;
          }
        }
      });
      
      // Tilf√∏j record hvis det har gyldig chauff√∏rnavn
      if (record.driver_name && typeof record.driver_name === 'string' && record.driver_name.trim() !== '') {
        console.log('‚úÖ Tilf√∏jer chauff√∏r record:', record.driver_name);
        recordsToInsert.push(record);
      }
    }
    
    console.log('üìä Konverteret data:', recordsToInsert.length, 'chauff√∏rer');
    
    if (recordsToInsert.length === 0) {
      console.error('‚ùå Ingen gyldige data fundet');
      return NextResponse.json({
        success: false,
        message: 'Ingen gyldige chauff√∏rdata fundet i filen',
        error: 'NO_VALID_DATA'
      }, { status: 400 });
    }
    
    // Inds√¶t data i database
    console.log('üíæ Inds√¶tter data i database...');
    const { error } = await supabase
      .from('driver_data')
      .insert(recordsToInsert);
    
    if (error) {
      console.error('‚ùå Database fejl:', error);
      return NextResponse.json({
        success: false,
        message: 'Database fejl',
        error: error.message
      }, { status: 500 });
    }
    
    console.log('‚úÖ Data inds√¶ttet succesfuldt:', recordsToInsert.length, 'records');
    
    return NextResponse.json({
      success: true,
      message: `${recordsToInsert.length} chauff√∏rer behandlet for ${month}/${year}`,
      data: {
        recordsProcessed: recordsToInsert.length,
        month,
        year
      }
    });
    
  } catch (error) {
    console.error('‚ùå Uventet fejl i upload API:', error);
    return NextResponse.json({
      success: false,
      message: 'Der opstod en uventet fejl under behandling af filen',
      error: error instanceof Error ? error.message : 'UNKNOWN_ERROR'
    }, { status: 500 });
  }
} 